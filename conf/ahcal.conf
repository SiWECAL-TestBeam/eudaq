[RunControl]
#STOP_RUN_AFTER_N_SECONDS = 3600: start new run after 1 hour
STOP_RUN_AFTER_N_SECONDS = GENERATE_STOP_RUN_AFTER_N_SECONDS
#STOP_RUN_AFTER_N_SECONDS = STAGEGENERATE_SECONDS
#STOP_RUN_AFTER_N_EVENTS = STAGEGENERATE_EVENTS
NEXT_RUN_CONF_FILE = GENERATE_NEXT_RUN_CONF_FILE
RUN_NUMBER = GENERATE_RUN_NUMBER
STOP_INCATIVITY_SECONDS = GENERATE_STOP_INCATIVITY_SECONDS
MONITORED_COLLECTOR_NAME = "bxidColl1"

[LogCollector.log]
# Currently, all LogCollectors have a hardcoded runtime name: log
# nothing
 
[DataCollector.dc1]
EUDAQ_MN=StdEventMonitor
# send assambled event to the monitor with runtime name my_mon;
PRODUCERS="AHCAL1"
EUDAQ_FW=native
# the format of data file
EUDAQ_FW_PATTERN="./data/directsave_Run$6R.raw"
# the name pattern of data file
# the $12D will be converted a data/time string with 12 digits.
# the $6R will be converted a run number string with 6 digits.
# the $X will be converted the suffix name of data file.
DISABLE_PRINT=0

#[DataCollector.bxidColl1]
#EUDAQ_FW=slcio
# the format of data file
# EUDAQ_FW_PATTERN="/media/sf_virtual/data/slcio/run$6R_$13D$X"
# the name pattern of data file
# the $12D will be converted a data/time string with 12 digits.
# the $6R will be converted a run number string with 6 digits.
# the $X will be converted the suffix name of data file.
#MandatoryBif=0
#DISABLE_PRINT=0

[Producer.AHCAL1]
EUDAQ_DC="dc1" # names of data collectors, where will be data sent
#FileLEDsettings ="F:\\LEDEUDAQ\\LED1.ini" #if used, Labview will load LED settings from the ini file on the labview computer
#FileLEDsettings ="F:\\LEDEUDAQ\\LED1.ini"
FileMode = 0
WaitMillisecForFile = 1000
StartWaitSeconds = 1
# Sleeping time (in seconds) after clicking stop: needed to read
# all the events stored in the Labview data queue
waitsecondsForQueuedEvents = 3 # wait time in the ScReader::OnStop() method.
IPAddress = "192.168.1.2" # IP address of the labview PC
Port = 5622 # port number defined in the Labview
Reader = "Scintillator" # needs to be "Scintillator" for AHCAL DAQ
WriteRawOutput = 1 # whether to save the raw data in the producer
RawFileName = "data/AhcalRaw/ahcalRaw_Run%06d" # raw filename pattern
#RawFileName = "/dev/null"
WriteRawFileNameTimestamp = 1 # whether to add a timestamp to the name
ColoredTerminalMessages = 1 # whether to use colored output or not. For Linux: yes, windows: no
LdaTrigidOffset = 1 # to compensate differences between TLU (or other trigger number source) and LDA. Eudaq Event counting starts from this number and will be always subtracted from the eudaq event triggerid.
LdaTrigidStartsFrom = 1 # The first expected raw triggerID from LDA in the data stream in case it is not 0. It suppresses error warning for the first event. When set higher then the first event, triggers below the provided number are ignored!
GenerateTriggerIDFrom = 0 # sets from which triggerID number should be data generated (and filled with dummy triggers if necessary). Only works when insert_dummy_packets is enabled and in selected event building modes
InsertDummyPackets = 0 # 1=inserts dummy packets to keep correct sequence of TrigIDs or ReadOutCycles, even if there is not hit registered; 0=do not insert anything

#LdaTrigidOffset to compensate differences between TLU (or other trigger number source) and LDA. Eudaq Event counting starts from this number and will be always subtracted from the eudaq event triggerid.
LdaTrigidOffset = 0
#LdaTrigidStartsFrom: The first expected raw triggerID from LDA in the data stream in case it is not 0. It suppresses error warning for the first event. When set higher then the first event, triggers below the provided number are ignored!
LdaTrigidStartsFrom = 1
#GenerateTriggerIDFrom sets from which triggerID number should be data generated (and filled with dummy triggers if necessary). Only works when insert_dummy_packets is enabled and in selected event building modes 
GenerateTriggerIDFrom = 0
#InsertDummyPackets: 1=inserts dummy packets to keep correct sequence of TrigIDs or ReadOutCycles; 0=do not insert anything
InsertDummyPackets = 0

#When RedirectInputFromFile is set, an existing raw raw data file is used as a fake input from detector
#RedirectInputFromFile="/home/kvas/git/eudaq-KLauS/data/klaus2.raw"
#EventBuildingMode selects what event building will be used. Uncomment which mode is used (options: "ROC", "TRIGGERID", "BUILD_BXID_ALL", "BUILD_BXID_VALIDATED")
EventBuildingMode = "ROC"
#EventBuildingMode = "TRIGGERID"
#EventBuildingMode = "BUILD_BXID_ALL"
#EventBuildingMode = "BUILD_BXID_VALIDATED"

#EventNumberingPreference chooses a main numbering method, when both are available (especially in BUILD_BXID_VALIDATE and TRIGGERID event building mode) 
EventNumberingPreference = "TRIGGERID"
#EventNumberingPreference = "TIMESTAMP"

#IgnoreLdaTimestamps ignores timestamp in the LDA data stream
IgnoreLdaTimestamps = 1

#KeepBuffered: how many readout cycle will be held in the memory befor sending out. This filters out packets, that come out of order
KeepBuffered = 5

#DebugKeepBuffered: 1=keep events in producer buffer and don't send the data to data collector. 0=pass packets normally
DebugKeepBuffered = 0

#AHCALBXID0offset = offset from start acquisition Timestamp to BXID0 (in 25ns steps). Varies with AHCAL powerpulsing setting and DIF firmware
AHCALBXID0Offset = 2123
#AHCALBXIDWidth = length of the bxid in 25 ns steps. 4us=160, 200ns=8
AHCALBXIDWidth = 160
MaximumTrigidSkip = 65500 # maximum numbers of triggers, that are allowed to skip. If more, treated as bad data
MaximumROCJump = 100
ChipidAddBeforeMasking = -1 # -1 to count chipid from 0
ChipidKeepBits = 2 #single HBU
ChipidAddAdterMasking = 0
AppendDifidToChipidBitPosition = 8 # where to add the difid
MinimumBxid = 1 #minimal accepted bxid. bxid0 has a TDC bug
MinimumEventHits = 0 #minimal count of hits in the whole event (hits are counted from all layers)


